{
  "address": "0x8E252A679C87313Ccefc9559F4f1c0e4062390B5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_apeApeUSD",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Seize",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "apeApeUSD",
      "outputs": [
        {
          "internalType": "contract IApeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apeUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apeUSDCurvePool",
      "outputs": [
        {
          "internalType": "contract ICurveStableSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "booster",
      "outputs": [
        {
          "internalType": "contract IBooster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLP",
          "type": "uint256"
        }
      ],
      "name": "depositAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getAmountApeUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getAmountCurveLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minApeUSD",
          "type": "uint256"
        }
      ],
      "name": "unstakeAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0891bfd317ce72a54a35b808afdf6447fe41a4ca6b1534240c90e4b26ca11493",
  "receipt": {
    "to": null,
    "from": "0x9299DBA92B45aa8FC298A20c4F5e753E5871E8e5",
    "contractAddress": "0x8E252A679C87313Ccefc9559F4f1c0e4062390B5",
    "transactionIndex": 57,
    "gasUsed": "1372901",
    "logsBloom": "0x
    "blockHash": "0x4d717d9aa88153c3ffe1e6c0a73f07c58817f22c9b159afbabe946dd62bff07b",
    "transactionHash": "0x0891bfd317ce72a54a35b808afdf6447fe41a4ca6b1534240c90e4b26ca11493",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 15308530,
        "transactionHash": "0x0891bfd317ce72a54a35b808afdf6447fe41a4ca6b1534240c90e4b26ca11493",
        "address": "0x8E252A679C87313Ccefc9559F4f1c0e4062390B5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009299dba92b45aa8fc298a20c4f5e753e5871e8e5"
        ],
        "data": "0x",
        "logIndex": 166,
        "blockHash": "0x4d717d9aa88153c3ffe1e6c0a73f07c58817f22c9b159afbabe946dd62bff07b"
      }
    ],
    "blockNumber": 15308530,
    "cumulativeGasUsed": "9909020",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc7319dBc86A121313Bc48B7C54d0672756465031"
  ],
  "numDeployments": 1,
  "solcInputHash": "3e3d50ae2476e58d6f449ce4544a2eee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_apeApeUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Seize\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apeApeUSD\",\"outputs\":[{\"internalType\":\"contract IApeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeUSDCurvePool\",\"outputs\":[{\"internalType\":\"contract ICurveStableSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLP\",\"type\":\"uint256\"}],\"name\":\"depositAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountApeUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountCurveLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minApeUSD\",\"type\":\"uint256\"}],\"name\":\"unstakeAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StabilizerV2.sol\":\"StabilizerV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/StabilizerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IApeToken.sol\\\";\\nimport \\\"./interfaces/IBaseRewardPool.sol\\\";\\nimport \\\"./interfaces/IBooster.sol\\\";\\nimport \\\"./interfaces/ICurveStableSwap.sol\\\";\\n\\ncontract StabilizerV2 is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    ICurveStableSwap public constant apeUSDCurvePool =\\n        ICurveStableSwap(0x04b727C7e246CA70d496ecF52E6b6280f3c8077D);\\n    IBooster public constant booster =\\n        IBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n    uint256 public constant poolId = 103; // Convex pool 103\\n\\n    IApeToken public immutable apeApeUSD;\\n    IERC20 public immutable apeUSD;\\n\\n    event Seize(address token, uint256 amount);\\n\\n    constructor(address _apeApeUSD) {\\n        apeApeUSD = IApeToken(_apeApeUSD);\\n        apeUSD = IERC20(apeApeUSD.underlying());\\n    }\\n\\n    function getAmountCurveLP(uint256 amount) external view returns (uint256) {\\n        return apeUSDCurvePool.calc_token_amount([amount, 0], true); // [apeUSD, FRAX/USDC LP]\\n    }\\n\\n    function getAmountApeUSD(uint256 amount) external view returns (uint256) {\\n        return apeUSDCurvePool.calc_withdraw_one_coin(amount, 0); // 0: apeUSD\\n    }\\n\\n    function depositAndStake(uint256 amount, uint256 minLP)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        if (amount > 0) {\\n            // Borrow apeUSD.\\n            require(\\n                apeApeUSD.borrow(payable(address(this)), amount) == 0,\\n                \\\"borrow failed\\\"\\n            );\\n        }\\n\\n        // Approve apeUSD and add liquidity to Curve pool.\\n        uint256 apeUSDBalance = apeUSD.balanceOf(address(this));\\n        if (apeUSDBalance > 0) {\\n            apeUSD.safeIncreaseAllowance(\\n                address(apeUSDCurvePool),\\n                apeUSDBalance\\n            );\\n            apeUSDCurvePool.add_liquidity(\\n                [apeUSDBalance, 0], // [apeUSD, FRAX/USDC LP]\\n                minLP,\\n                address(this)\\n            );\\n        }\\n\\n        // Approve Curve LP, deposit LP to Convex booster, and stake Convex deposit token to base reward pool.\\n        uint256 lpBalance = apeUSDCurvePool.balanceOf(address(this));\\n        if (lpBalance > 0) {\\n            apeUSDCurvePool.approve(address(booster), lpBalance);\\n            booster.depositAll(poolId, true);\\n        }\\n    }\\n\\n    function unstakeAndWithdraw(uint256 amount, uint256 minApeUSD)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        // Unstake Convex deposit token from base reward pool and unwrap it back to Curve LP.\\n        (, , , address baseRewardPool, , ) = booster.poolInfo(poolId);\\n        if (amount > 0) {\\n            IBaseRewardPool(baseRewardPool).withdrawAndUnwrap(amount, false); // not claim rewards\\n        }\\n\\n        // Remove liquidity from Curve pool.\\n        uint256 lpBalance = apeUSDCurvePool.balanceOf(address(this));\\n        if (lpBalance > 0) {\\n            apeUSDCurvePool.remove_liquidity_one_coin(\\n                lpBalance,\\n                0, // 0: apeUSD\\n                minApeUSD,\\n                address(this)\\n            );\\n        }\\n\\n        // Approve and repay apeUSD.\\n        uint256 repayAmount = apeUSD.balanceOf(address(this));\\n        uint256 borrowBalance = apeApeUSD.borrowBalanceCurrent(address(this));\\n        if (repayAmount > borrowBalance) {\\n            repayAmount = borrowBalance;\\n        }\\n        apeUSD.safeIncreaseAllowance(address(apeApeUSD), repayAmount);\\n        require(\\n            apeApeUSD.repayBorrow(payable(address(this)), repayAmount) == 0,\\n            \\\"repay failed\\\"\\n        );\\n    }\\n\\n    function claimRewards() external onlyOwner {\\n        (, , , address baseRewardPool, , ) = booster.poolInfo(poolId);\\n        IBaseRewardPool(baseRewardPool).getReward();\\n    }\\n\\n    function seize(address token, uint256 amount) external onlyOwner {\\n        if (token == address(apeUSD)) {\\n            uint256 borrowBalance = apeApeUSD.borrowBalanceCurrent(\\n                address(this)\\n            );\\n            require(borrowBalance == 0, \\\"borrow balance not zero\\\");\\n        }\\n        IERC20(token).safeTransfer(owner(), amount);\\n        emit Seize(token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0a7ecf15a84f6f10567719c9677618fb255ef65b44da1812d36c892ec55d7e9a\",\"license\":\"MIT\"},\"contracts/interfaces/IApeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IApeToken {\\n    function underlying() external view returns (address);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrow(address payable borrower, uint256 borrowAmount)\\n        external\\n        returns (uint256);\\n\\n    function repayBorrow(address borrower, uint256 repayAmount)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x6f94e0d3443a1c7a3877831138b52f0c21b0858bb627ecab0a9575693a550f2b\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBaseRewardPool {\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function withdraw(uint256 _amount, bool _claim) external returns (bool);\\n\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim)\\n        external\\n        returns (bool);\\n\\n    function getReward() external returns (bool);\\n\\n    function stake(uint256 _amount) external returns (bool);\\n\\n    function stakeFor(address _account, uint256 _amount)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x403f0f08cedd0078bd065ffbe02ea0a2203d193f7b99dff2d1d32edbe9e3b81a\",\"license\":\"MIT\"},\"contracts/interfaces/IBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBooster {\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x8f03f1153ad1d7acb5e85570324244c33f8675ecf8499260fe9fbe4e9a062e45\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICurveStableSwap {\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 value) external returns (bool);\\n\\n    function add_liquidity(\\n        uint256[2] memory _amounts,\\n        uint256 _min_mint_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xc161dd39f1651b447dfbd2b87a89af98d204c944b8dd1abcf9adf36f76ca4d97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620018ab380380620018ab833981016040819052620000349162000127565b6200003f33620000d7565b600180556001600160a01b038116608081905260408051636f307dc360e01b81529051636f307dc391600480820192602092909190829003018186803b1580156200008957600080fd5b505afa1580156200009e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c4919062000127565b6001600160a01b031660a0525062000159565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200013a57600080fd5b81516001600160a01b03811681146200015257600080fd5b9392505050565b60805160a0516116e6620001c560003960008181610185015281816104f90152818161063501528181610ac401528181610b5b0152610e050152600081816101f30152818161059e0152818161065701528181610698015281816109eb0152610e5501526116e66000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063c6def07611610066578063c6def076146101d3578063ca613f8a146101ee578063eb9253c014610215578063f2fde38b1461022857600080fd5b8063715018a6146101a75780637969ee28146101af5780638da5cb5b146101c257600080fd5b8063372500ab116100c8578063372500ab1461013d5780633e0dc34e146101455780634ba549af1461014d5780636da2a1221461018057600080fd5b806310aec8f9146100ef5780631f0c2bf3146101045780632dc4c0f31461012a575b600080fd5b6101026100fd36600461143e565b61023b565b005b610117610112366004611460565b610764565b6040519081526020015b60405180910390f35b610117610138366004611460565b610807565b610102610849565b610117606781565b6101687304b727c7e246ca70d496ecf52e6b6280f3c8077d81565b6040516001600160a01b039091168152602001610121565b6101687f000000000000000000000000000000000000000000000000000000000000000081565b610102610955565b6101026101bd36600461143e565b610969565b6000546001600160a01b0316610168565b61016873f403c135812408bfbe8713b5a23a04b3d48aae3181565b6101687f000000000000000000000000000000000000000000000000000000000000000081565b61010261022336600461148e565b610dfb565b6101026102363660046114ba565b610f97565b610243611010565b6002600154141561029b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155604051631526fe2760e01b81526067600482015260009073f403c135812408bfbe8713b5a23a04b3d48aae3190631526fe279060240160c06040518083038186803b1580156102ee57600080fd5b505afa158015610302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032691906114ec565b5050935050505060008311156103b957604051636197390160e11b815260048101849052600060248201526001600160a01b0382169063c32e720290604401602060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b7919061156e565b505b6040516370a0823160e01b81523060048201526000907304b727c7e246ca70d496ecf52e6b6280f3c8077d906370a082319060240160206040518083038186803b15801561040657600080fd5b505afa15801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190611589565b905080156104e15760405163081579a560e01b81526004810182905260006024820152604481018490523060648201527304b727c7e246ca70d496ecf52e6b6280f3c8077d9063081579a590608401602060405180830381600087803b1580156104a757600080fd5b505af11580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190611589565b505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611589565b6040516305eff7ef60e21b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc90602401602060405180830381600087803b1580156105e257600080fd5b505af11580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a9190611589565b905080821115610628578091505b61067c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008461106a565b60405163157b6bd560e31b8152306004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063abdb5ea890604401602060405180830381600087803b1580156106e457600080fd5b505af11580156106f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071c9190611589565b156107585760405162461bcd60e51b815260206004820152600c60248201526b1c995c185e4819985a5b195960a21b6044820152606401610292565b50506001805550505050565b604080518082018252828152600060208201819052915163ed8e84f360e01b81527304b727c7e246ca70d496ecf52e6b6280f3c8077d9163ed8e84f3916107b191906001906004016115c5565b60206040518083038186803b1580156107c957600080fd5b505afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108019190611589565b92915050565b60405163cc2b27d760e01b815260048101829052600060248201819052907304b727c7e246ca70d496ecf52e6b6280f3c8077d9063cc2b27d7906044016107b1565b610851611010565b604051631526fe2760e01b81526067600482015260009073f403c135812408bfbe8713b5a23a04b3d48aae3190631526fe279060240160c06040518083038186803b15801561089f57600080fd5b505afa1580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d791906114ec565b50509350505050806001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610951919061156e565b5050565b61095d611010565b6109676000611164565b565b610971611010565b600260015414156109c45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610292565b60026001558115610aac57604051634b8a352960e01b8152306004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634b8a352990604401602060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190611589565b15610aac5760405162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddc819985a5b1959609a1b6044820152606401610292565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610b0e57600080fd5b505afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b469190611589565b90508015610c3657610b966001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167304b727c7e246ca70d496ecf52e6b6280f3c8077d8361106a565b60408051808201825282815260006020820152905163030f92d560e21b81527304b727c7e246ca70d496ecf52e6b6280f3c8077d91630c3e4b5491610be29190869030906004016115e2565b602060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190611589565b505b6040516370a0823160e01b81523060048201526000907304b727c7e246ca70d496ecf52e6b6280f3c8077d906370a082319060240160206040518083038186803b158015610c8357600080fd5b505afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb9190611589565b90508015610df15760405163095ea7b360e01b815273f403c135812408bfbe8713b5a23a04b3d48aae316004820152602481018290527304b727c7e246ca70d496ecf52e6b6280f3c8077d9063095ea7b390604401602060405180830381600087803b158015610d2a57600080fd5b505af1158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d62919061156e565b5060405163303acfe760e11b8152606760048201526001602482015273f403c135812408bfbe8713b5a23a04b3d48aae31906360759fce90604401602060405180830381600087803b158015610db757600080fd5b505af1158015610dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610def919061156e565b505b5050600180555050565b610e03611010565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610f2b576040516305eff7ef60e21b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906317bfdfbc90602401602060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190611589565b90508015610f295760405162461bcd60e51b815260206004820152601760248201527f626f72726f772062616c616e6365206e6f74207a65726f0000000000000000006044820152606401610292565b505b610f51610f406000546001600160a01b031690565b6001600160a01b03841690836111b4565b604080516001600160a01b0384168152602081018390527f4051ba94e08bb094159fc38391422b4b8ccfd2b1f8919c0eb37bb042d4b9cd8e910160405180910390a15050565b610f9f611010565b6001600160a01b0381166110045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610292565b61100d81611164565b50565b6000546001600160a01b031633146109675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610292565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156110b657600080fd5b505afa1580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee9190611589565b6110f8919061160f565b6040516001600160a01b03851660248201526044810182905290915061115e90859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111e9565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0383166024820152604481018290526111e490849063a9059cbb60e01b90606401611127565b505050565b600061123e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112bb9092919063ffffffff16565b8051909150156111e4578080602001905181019061125c919061156e565b6111e45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610292565b60606112ca84846000856112d4565b90505b9392505050565b6060824710156113355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610292565b6001600160a01b0385163b61138c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610292565b600080866001600160a01b031685876040516113a89190611661565b60006040518083038185875af1925050503d80600081146113e5576040519150601f19603f3d011682016040523d82523d6000602084013e6113ea565b606091505b50915091506113fa828286611405565b979650505050505050565b606083156114145750816112cd565b8251156114245782518084602001fd5b8160405162461bcd60e51b8152600401610292919061167d565b6000806040838503121561145157600080fd5b50508035926020909101359150565b60006020828403121561147257600080fd5b5035919050565b6001600160a01b038116811461100d57600080fd5b600080604083850312156114a157600080fd5b82356114ac81611479565b946020939093013593505050565b6000602082840312156114cc57600080fd5b81356112cd81611479565b805180151581146114e757600080fd5b919050565b60008060008060008060c0878903121561150557600080fd5b865161151081611479565b602088015190965061152181611479565b604088015190955061153281611479565b606088015190945061154381611479565b608088015190935061155481611479565b915061156260a088016114d7565b90509295509295509295565b60006020828403121561158057600080fd5b6112cd826114d7565b60006020828403121561159b57600080fd5b5051919050565b8060005b600281101561115e5781518452602093840193909101906001016115a6565b606081016115d382856115a2565b82151560408301529392505050565b608081016115f082866115a2565b60408201939093526001600160a01b0391909116606090910152919050565b6000821982111561163057634e487b7160e01b600052601160045260246000fd5b500190565b60005b83811015611650578181015183820152602001611638565b8381111561115e5750506000910152565b60008251611673818460208701611635565b9190910192915050565b602081526000825180602084015261169c816040850160208701611635565b601f01601f1916919091016040019291505056fea264697066735822122062ecf03e3ac3dccc70d881837603304f8e78df539839504f351cf487880b1fe064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063c6def07611610066578063c6def076146101d3578063ca613f8a146101ee578063eb9253c014610215578063f2fde38b1461022857600080fd5b8063715018a6146101a75780637969ee28146101af5780638da5cb5b146101c257600080fd5b8063372500ab116100c8578063372500ab1461013d5780633e0dc34e146101455780634ba549af1461014d5780636da2a1221461018057600080fd5b806310aec8f9146100ef5780631f0c2bf3146101045780632dc4c0f31461012a575b600080fd5b6101026100fd36600461143e565b61023b565b005b610117610112366004611460565b610764565b6040519081526020015b60405180910390f35b610117610138366004611460565b610807565b610102610849565b610117606781565b6101687304b727c7e246ca70d496ecf52e6b6280f3c8077d81565b6040516001600160a01b039091168152602001610121565b6101687f000000000000000000000000000000000000000000000000000000000000000081565b610102610955565b6101026101bd36600461143e565b610969565b6000546001600160a01b0316610168565b61016873f403c135812408bfbe8713b5a23a04b3d48aae3181565b6101687f000000000000000000000000000000000000000000000000000000000000000081565b61010261022336600461148e565b610dfb565b6101026102363660046114ba565b610f97565b610243611010565b6002600154141561029b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155604051631526fe2760e01b81526067600482015260009073f403c135812408bfbe8713b5a23a04b3d48aae3190631526fe279060240160c06040518083038186803b1580156102ee57600080fd5b505afa158015610302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032691906114ec565b5050935050505060008311156103b957604051636197390160e11b815260048101849052600060248201526001600160a01b0382169063c32e720290604401602060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b7919061156e565b505b6040516370a0823160e01b81523060048201526000907304b727c7e246ca70d496ecf52e6b6280f3c8077d906370a082319060240160206040518083038186803b15801561040657600080fd5b505afa15801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190611589565b905080156104e15760405163081579a560e01b81526004810182905260006024820152604481018490523060648201527304b727c7e246ca70d496ecf52e6b6280f3c8077d9063081579a590608401602060405180830381600087803b1580156104a757600080fd5b505af11580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190611589565b505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611589565b6040516305eff7ef60e21b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc90602401602060405180830381600087803b1580156105e257600080fd5b505af11580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a9190611589565b905080821115610628578091505b61067c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008461106a565b60405163157b6bd560e31b8152306004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063abdb5ea890604401602060405180830381600087803b1580156106e457600080fd5b505af11580156106f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071c9190611589565b156107585760405162461bcd60e51b815260206004820152600c60248201526b1c995c185e4819985a5b195960a21b6044820152606401610292565b50506001805550505050565b604080518082018252828152600060208201819052915163ed8e84f360e01b81527304b727c7e246ca70d496ecf52e6b6280f3c8077d9163ed8e84f3916107b191906001906004016115c5565b60206040518083038186803b1580156107c957600080fd5b505afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108019190611589565b92915050565b60405163cc2b27d760e01b815260048101829052600060248201819052907304b727c7e246ca70d496ecf52e6b6280f3c8077d9063cc2b27d7906044016107b1565b610851611010565b604051631526fe2760e01b81526067600482015260009073f403c135812408bfbe8713b5a23a04b3d48aae3190631526fe279060240160c06040518083038186803b15801561089f57600080fd5b505afa1580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d791906114ec565b50509350505050806001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610951919061156e565b5050565b61095d611010565b6109676000611164565b565b610971611010565b600260015414156109c45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610292565b60026001558115610aac57604051634b8a352960e01b8152306004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634b8a352990604401602060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190611589565b15610aac5760405162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddc819985a5b1959609a1b6044820152606401610292565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610b0e57600080fd5b505afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b469190611589565b90508015610c3657610b966001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167304b727c7e246ca70d496ecf52e6b6280f3c8077d8361106a565b60408051808201825282815260006020820152905163030f92d560e21b81527304b727c7e246ca70d496ecf52e6b6280f3c8077d91630c3e4b5491610be29190869030906004016115e2565b602060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190611589565b505b6040516370a0823160e01b81523060048201526000907304b727c7e246ca70d496ecf52e6b6280f3c8077d906370a082319060240160206040518083038186803b158015610c8357600080fd5b505afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb9190611589565b90508015610df15760405163095ea7b360e01b815273f403c135812408bfbe8713b5a23a04b3d48aae316004820152602481018290527304b727c7e246ca70d496ecf52e6b6280f3c8077d9063095ea7b390604401602060405180830381600087803b158015610d2a57600080fd5b505af1158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d62919061156e565b5060405163303acfe760e11b8152606760048201526001602482015273f403c135812408bfbe8713b5a23a04b3d48aae31906360759fce90604401602060405180830381600087803b158015610db757600080fd5b505af1158015610dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610def919061156e565b505b5050600180555050565b610e03611010565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610f2b576040516305eff7ef60e21b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906317bfdfbc90602401602060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190611589565b90508015610f295760405162461bcd60e51b815260206004820152601760248201527f626f72726f772062616c616e6365206e6f74207a65726f0000000000000000006044820152606401610292565b505b610f51610f406000546001600160a01b031690565b6001600160a01b03841690836111b4565b604080516001600160a01b0384168152602081018390527f4051ba94e08bb094159fc38391422b4b8ccfd2b1f8919c0eb37bb042d4b9cd8e910160405180910390a15050565b610f9f611010565b6001600160a01b0381166110045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610292565b61100d81611164565b50565b6000546001600160a01b031633146109675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610292565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156110b657600080fd5b505afa1580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee9190611589565b6110f8919061160f565b6040516001600160a01b03851660248201526044810182905290915061115e90859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111e9565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0383166024820152604481018290526111e490849063a9059cbb60e01b90606401611127565b505050565b600061123e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112bb9092919063ffffffff16565b8051909150156111e4578080602001905181019061125c919061156e565b6111e45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610292565b60606112ca84846000856112d4565b90505b9392505050565b6060824710156113355760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610292565b6001600160a01b0385163b61138c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610292565b600080866001600160a01b031685876040516113a89190611661565b60006040518083038185875af1925050503d80600081146113e5576040519150601f19603f3d011682016040523d82523d6000602084013e6113ea565b606091505b50915091506113fa828286611405565b979650505050505050565b606083156114145750816112cd565b8251156114245782518084602001fd5b8160405162461bcd60e51b8152600401610292919061167d565b6000806040838503121561145157600080fd5b50508035926020909101359150565b60006020828403121561147257600080fd5b5035919050565b6001600160a01b038116811461100d57600080fd5b600080604083850312156114a157600080fd5b82356114ac81611479565b946020939093013593505050565b6000602082840312156114cc57600080fd5b81356112cd81611479565b805180151581146114e757600080fd5b919050565b60008060008060008060c0878903121561150557600080fd5b865161151081611479565b602088015190965061152181611479565b604088015190955061153281611479565b606088015190945061154381611479565b608088015190935061155481611479565b915061156260a088016114d7565b90509295509295509295565b60006020828403121561158057600080fd5b6112cd826114d7565b60006020828403121561159b57600080fd5b5051919050565b8060005b600281101561115e5781518452602093840193909101906001016115a6565b606081016115d382856115a2565b82151560408301529392505050565b608081016115f082866115a2565b60408201939093526001600160a01b0391909116606090910152919050565b6000821982111561163057634e487b7160e01b600052601160045260246000fd5b500190565b60005b83811015611650578181015183820152602001611638565b8381111561115e5750506000910152565b60008251611673818460208701611635565b9190910192915050565b602081526000825180602084015261169c816040850160208701611635565b601f01601f1916919091016040019291505056fea264697066735822122062ecf03e3ac3dccc70d881837603304f8e78df539839504f351cf487880b1fe064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StabilizerV2.sol:StabilizerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/StabilizerV2.sol:StabilizerV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}